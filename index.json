{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | Krafted",
    "keywords": "API reference Browse the menu to checkout the API of each package with the details of their public interface."
  },
  "api/Krafted.DataAnnotations.EmailAddressRegexAttribute.html": {
    "href": "api/Krafted.DataAnnotations.EmailAddressRegexAttribute.html",
    "title": "Class EmailAddressRegexAttribute | Krafted",
    "keywords": "Class EmailAddressRegexAttribute Validates whether the specified email address is valid using regular expression. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute EmailAddressRegexAttribute Namespace : Krafted.DataAnnotations Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)] public sealed class EmailAddressRegexAttribute : ValidationAttribute Constructors | Improve this Doc View Source EmailAddressRegexAttribute() Initializes a new instance of the EmailAddressRegexAttribute class. Declaration public EmailAddressRegexAttribute() Remarks This constructor selects a reasonable default error message for System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) . Methods | Improve this Doc View Source IsValid(Object) Determines whether the specified value of the object is valid. Declaration public override bool IsValid(object value) Parameters Type Name Description System.Object value The value of the object to validate. Returns Type Description System.Boolean true if the specified value is valid; otherwise, false . Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"
  },
  "api/Krafted.DataAnnotations.html": {
    "href": "api/Krafted.DataAnnotations.html",
    "title": "Namespace Krafted.DataAnnotations | Krafted",
    "keywords": "Namespace Krafted.DataAnnotations Classes EmailAddressRegexAttribute Validates whether the specified email address is valid using regular expression. MinOneAttribute Specifies that the value is at minimum one (that is, positive). ModelValidator Provides a helper class for tests, that can be used to validate objects, properties, and methods when it is included in their associated System.ComponentModel.DataAnnotations.ValidationAttribute attributes. NotEmptyCollectionAttribute Specifies that at least one item is required in the collection."
  },
  "api/Krafted.DataAnnotations.MinOneAttribute.html": {
    "href": "api/Krafted.DataAnnotations.MinOneAttribute.html",
    "title": "Class MinOneAttribute | Krafted",
    "keywords": "Class MinOneAttribute Specifies that the value is at minimum one (that is, positive). Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute MinOneAttribute Namespace : Krafted.DataAnnotations Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)] public sealed class MinOneAttribute : ValidationAttribute Constructors | Improve this Doc View Source MinOneAttribute() Initializes a new instance of the MinOneAttribute class. Declaration public MinOneAttribute() Remarks This constructor selects a reasonable default error message for System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) . Methods | Improve this Doc View Source IsValid(Object) Determines whether the specified value of the object is valid. Declaration public override bool IsValid(object value) Parameters Type Name Description System.Object value The value of the object to validate. Returns Type Description System.Boolean true if the specified value is valid; otherwise, false . Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"
  },
  "api/Krafted.DataAnnotations.ModelValidator.html": {
    "href": "api/Krafted.DataAnnotations.ModelValidator.html",
    "title": "Class ModelValidator | Krafted",
    "keywords": "Class ModelValidator Provides a helper class for tests, that can be used to validate objects, properties, and methods when it is included in their associated System.ComponentModel.DataAnnotations.ValidationAttribute attributes. Inheritance System.Object ModelValidator Namespace : Krafted.DataAnnotations Syntax public static class ModelValidator Methods | Improve this Doc View Source Validate(Object) Determines whether the specified object is valid using the validation context, validation results collection, and a value that specifies whether to validate all properties. Declaration public static (bool IsValid, List<ValidationResult> ValidationResults) Validate(object model) Parameters Type Name Description System.Object model The model to validate. Returns Type Description System.ValueTuple < System.Boolean , System.Collections.Generic.List < System.ComponentModel.DataAnnotations.ValidationResult >> true if the model validates; otherwise, false with validation results."
  },
  "api/Krafted.DataAnnotations.NotEmptyCollectionAttribute.html": {
    "href": "api/Krafted.DataAnnotations.NotEmptyCollectionAttribute.html",
    "title": "Class NotEmptyCollectionAttribute | Krafted",
    "keywords": "Class NotEmptyCollectionAttribute Specifies that at least one item is required in the collection. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute NotEmptyCollectionAttribute Namespace : Krafted.DataAnnotations Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)] public sealed class NotEmptyCollectionAttribute : ValidationAttribute Constructors | Improve this Doc View Source NotEmptyCollectionAttribute() Initializes a new instance of the NotEmptyCollectionAttribute class. Declaration public NotEmptyCollectionAttribute() Remarks This constructor selects a reasonable default error message for System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) . Methods | Improve this Doc View Source IsValid(Object) Determines whether the specified value of the object is valid. Declaration public override bool IsValid(object value) Parameters Type Name Description System.Object value The value of the object to validate. Returns Type Description System.Boolean true if the specified value is valid; otherwise, false . Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"
  },
  "api/Krafted.DataAnnotations.Pt.html": {
    "href": "api/Krafted.DataAnnotations.Pt.html",
    "title": "Namespace Krafted.DataAnnotations.Pt | Krafted",
    "keywords": "Namespace Krafted.DataAnnotations.Pt Classes NifAttribute Validates whether the specified nif is valid."
  },
  "api/Krafted.DataAnnotations.Pt.NifAttribute.html": {
    "href": "api/Krafted.DataAnnotations.Pt.NifAttribute.html",
    "title": "Class NifAttribute | Krafted",
    "keywords": "Class NifAttribute Validates whether the specified nif is valid. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute NifAttribute Namespace : Krafted.DataAnnotations.Pt Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)] public sealed class NifAttribute : ValidationAttribute Remarks NIF means \"Número de Identificação Fiscal\", a.k.a \"Número de Contribuinte\", identifies a taxpayer entity in Portugal, whether it is a company or an individual. Constructors | Improve this Doc View Source NifAttribute() Initializes a new instance of the NifAttribute class. Declaration public NifAttribute() Remarks This constructor selects a reasonable default error message for System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) . Methods | Improve this Doc View Source IsValid(Object) Determines whether the specified value of the object is valid. Declaration public override bool IsValid(object value) Parameters Type Name Description System.Object value The value of the object to validate. Returns Type Description System.Boolean true if the specified value is valid; otherwise, false . Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"
  },
  "api/Krafted.DesignPatterns.Specifications.html": {
    "href": "api/Krafted.DesignPatterns.Specifications.html",
    "title": "Namespace Krafted.DesignPatterns.Specifications | Krafted",
    "keywords": "Namespace Krafted.DesignPatterns.Specifications Classes Specification<T> Represents a base class to Specification Pattern."
  },
  "api/Krafted.DesignPatterns.Specifications.Specification-1.html": {
    "href": "api/Krafted.DesignPatterns.Specifications.Specification-1.html",
    "title": "Class Specification<T> | Krafted",
    "keywords": "Class Specification<T> Represents a base class to Specification Pattern. Inheritance System.Object Specification<T> Namespace : Krafted.DesignPatterns.Specifications Syntax public abstract class Specification<T> Type Parameters Name Description T The model to verify. Fields | Improve this Doc View Source Default Starting point that return an initialized specification to allows us to build up new specifications on top of it. Declaration public static readonly Specification<T> Default Field Value Type Description Specification <T> Methods | Improve this Doc View Source And(Specification<T>) Adds an And specification. Declaration public Specification<T> And(Specification<T> specification) Parameters Type Name Description Specification <T> specification The specification. Returns Type Description Specification <T> The And specification. | Improve this Doc View Source IsSatisfiedBy(T) Determines whether is satisfied by the specified model. Declaration public bool IsSatisfiedBy(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Boolean true if is satisfied by the specified entity; otherwise, false . | Improve this Doc View Source Not() Adds an Not specification. Declaration public Specification<T> Not() Returns Type Description Specification <T> The Not specification. | Improve this Doc View Source Or(Specification<T>) Adds an Or specification. Declaration public Specification<T> Or(Specification<T> specification) Parameters Type Name Description Specification <T> specification The specification. Returns Type Description Specification <T> The Or specification. | Improve this Doc View Source ToExpression() Gets the expression. Declaration public abstract Expression<Func<T, bool>> ToExpression() Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> The expression."
  },
  "api/Krafted.Guards.Guard.html": {
    "href": "api/Krafted.Guards.Guard.html",
    "title": "Class Guard | Krafted",
    "keywords": "Class Guard Provides guard clauses to validate method arguments, in order to enforce defensive programming practice. See defensive programming . See guard clauses . Inheritance System.Object Guard Namespace : Krafted.Guards Syntax public class Guard Properties | Improve this Doc View Source Against The entry point to build the guard clauses. Declaration public static Guard Against { get; } Property Value Type Description Guard Methods | Improve this Doc View Source Any<T>(IEnumerable<T>, String, String) Throws an System.ArgumentException if the collection contains any elements, with this error message: Collection should be empty. Declaration public Guard Any<T>(IEnumerable<T> collection, string message = \"\", string parameterName = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which collection corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of enumerable. Remarks If the collection is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source Empty(Nullable<Guid>, String, String) Throws an System.ArgumentException if the parameter is empty, with this error message: Guid cannot be empty. Declaration public Guard Empty(Guid? parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.Nullable < System.Guid > parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source EmptyOrWhiteSpace(String, String, String) Throws an System.ArgumentException if the parameter is an empty string or consists only of white-space, with this error message: Parameter cannot be empty or consists exclusively of white-space characters. Declaration public Guard EmptyOrWhiteSpace(string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentNullException parameter is null . | Improve this Doc View Source False(Nullable<Boolean>, String, String) Throws an System.ArgumentException if the parameter is false , with this error message: Parameter cannot be false . Declaration public Guard False(bool? parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.Nullable < System.Boolean > parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source False(Predicate<Boolean>, String, String) Throws an System.ArgumentException if the predicate is false , with this error message: Predicate cannot be false . Or, if the optional parameter message was set, with their message. Declaration public Guard False(Predicate<bool> predicate, string message = \"\", string parameterName = null) Parameters Type Name Description System.Predicate < System.Boolean > predicate The predicate to check. System.String message The optional error message passed to System.ArgumentException if the predicate is false . System.String parameterName The name of the parameter with which predicate corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the predicate is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source GreaterThan<T>(Nullable<T>, T, String, String) Throws an System.ArgumentException if the number is greater than valueToCompare , with this error message: Number cannot be greater than {valueToCompare}. Declaration public Guard GreaterThan<T>(T? number, T valueToCompare, string message = \"\", string parameterName = null) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> number The number to check. T valueToCompare The value to compare. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which valueToCompare corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the number. Remarks If the number is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source InvalidCnpj(String, String) Throws an System.FormatException if the cnpj is invalid, with this error message: Invalid CNPJ: {cnpj}. CNPJ stands for \"Cadastro Nacional da Pessoa Jurídica\" in Brazil. It's used to identify a legal entity and other types of legal arrangement without legal personality (such as condominiums, public agencies, funds) in Brazil. See more . Declaration public Guard InvalidCnpj(string cnpj, string message = \"\") Parameters Type Name Description System.String cnpj The cnpj to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. Returns Type Description Guard The guard. Remarks If the cnpj is null , the validation is ignored (i.e. does not throws an System.FormatException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.FormatException . | Improve this Doc View Source InvalidCpf(String, String) Throws an System.FormatException if the cpf is invalid, with this error message: Invalid CPF: {cpf}. CPF stands for \"Cadastro de Pessoa Física\" in Brazil. It's used to identify an individual taxpayer in Brazil. See more . Declaration public Guard InvalidCpf(string cpf, string message = \"\") Parameters Type Name Description System.String cpf The cpf to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. Returns Type Description Guard The guard. Remarks If the cpf is null , the validation is ignored (i.e. does not throws an System.FormatException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.FormatException . | Improve this Doc View Source InvalidEmail(String, String, String) Throws an System.FormatException if the emailAddress is invalid, with this error message: E-mail address invalid: {emailAddress}. Declaration public Guard InvalidEmail(string emailAddress, string message = \"\", string parameterName = null) Parameters Type Name Description System.String emailAddress The e-mail address to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which emailAddress corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the emailAddress is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.FormatException . | Improve this Doc View Source InvalidNif(String, String) Throws an System.FormatException if the nif is invalid, with this error message: Invalid NIF: {nif}. NIF stands for \"Número de Identificação Fiscal\" in Portugal. It's used to identify an individual or legal entity taxpayer in Portugal. See more . Declaration public Guard InvalidNif(string nif, string message = \"\") Parameters Type Name Description System.String nif The nif to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. Returns Type Description Guard The guard. Remarks If the nif is null , the validation is ignored (i.e. does not throws an System.FormatException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.FormatException . | Improve this Doc View Source Length(UInt32, String, String, String) Throws an System.ArgumentOutOfRangeException if the length of the parameter is different of the specified exactLength , with this error message: parameterName must be length exactLength . Declaration public Guard Length(uint exactLength, string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.UInt32 exactLength The exact length the parameter must be. System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentOutOfRangeException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentOutOfRangeException . | Improve this Doc View Source Length(UInt32, UInt32, String, String, String) Throws an System.ArgumentOutOfRangeException if the length of the parameter is outside of the specified range, with this error message: parameterName must be at least minLength character, and at most maxLength characters. Declaration public Guard Length(uint minLength, uint maxLength, string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.UInt32 minLength The minimum length the parameter must be. System.UInt32 maxLength The maximum length the parameter must be. System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentOutOfRangeException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentOutOfRangeException . | Improve this Doc View Source LessThan<T>(Nullable<T>, T, String, String) Throws an System.ArgumentException if the number is less than valueToCompare , with this error message: Number cannot be less than {valueToCompare}. Declaration public Guard LessThan<T>(T? number, T valueToCompare, string message = \"\", string parameterName = null) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> number The number to check. T valueToCompare The value to compare. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which valueToCompare corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the number. Remarks If the number is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source Match(String, String, RegexOptions, String, String) Throws an System.ArgumentException if the regular expression specified in pattern finds a match in parameter , with this error message: Parameter matches the specified regular expression. Declaration public Guard Match(string parameter, string pattern, RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Compiled, string message = \"\", string parameterName = null) Parameters Type Name Description System.String parameter The parameter to check. System.String pattern The regular expression pattern to match. System.Text.RegularExpressions.RegexOptions options The regular expression options. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source Match<TException>(String, String, RegexOptions, String, String) Throws an System.ArgumentException if the regular expression specified in pattern finds a match in parameter , with this error message: Parameter matches the specified regular expression. Declaration public Guard Match<TException>(string parameter, string pattern, RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Compiled, string message = \"\", string parameterName = null) where TException : Exception Parameters Type Name Description System.String parameter The parameter to check. System.String pattern The regular expression pattern to match. System.Text.RegularExpressions.RegexOptions options The regular expression options. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description TException The type of the exception. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an TException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source MaxLength(UInt32, String, String, String) Throws an System.ArgumentException if the length of the parameter is greater than the specified maxLength , with this error message: parameterName must be at most maxLength characters. Declaration public Guard MaxLength(uint maxLength, string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.UInt32 maxLength The maximum length the parameter must be. System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source MinLength(UInt32, String, String, String) Throws an System.ArgumentException if the length of the parameter is less than the specified minLength , with this error message: parameterName must be at least minLength characters. Declaration public Guard MinLength(uint minLength, string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.UInt32 minLength The minimum length the parameter must be. System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source Negative<T>(Nullable<T>, String, String) Throws an System.ArgumentException if the number is negative, with this error message: Number cannot be negative. Declaration public Guard Negative<T>(T? number, string message = \"\", string parameterName = null) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> number The number to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which number corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the number. Remarks If the number is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source NotAny<T>(IEnumerable<T>, String, String) Throws an System.ArgumentException if the collection not contains any elements, with this error message: Collection cannot be empty. Declaration public Guard NotAny<T>(IEnumerable<T> collection, string message = \"\", string parameterName = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which collection corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of enumerable. Remarks If the collection is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source NotEmpty(Nullable<Guid>, String, String) Throws an System.ArgumentException if the parameter is not empty, with this error message: Guid should be empty. Declaration public Guard NotEmpty(Guid? parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.Nullable < System.Guid > parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source NotExists<TEnum>(Nullable<TEnum>, String, String) Throws an System.ArgumentException if the specified value not exists in the specified TEnum enumeration, with this error message: The {value} not exists in the {TEnum}. Declaration public Guard NotExists<TEnum>(TEnum? value, string message = \"\", string parameterName = null) where TEnum : struct, Enum Parameters Type Name Description System.Nullable <TEnum> value The value to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which value corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description TEnum The type of the enumeration. Remarks If the value is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source NotMatch(String, String, RegexOptions, String, String) Throws an System.ArgumentException if the regular expression specified in pattern not finds a match in parameter , with this error message: Parameter not matches the specified regular expression. Declaration public Guard NotMatch(string parameter, string pattern, RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Compiled, string message = \"\", string parameterName = null) Parameters Type Name Description System.String parameter The parameter to check. System.String pattern The regular expression pattern to match. System.Text.RegularExpressions.RegexOptions options The regular expression options. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source NotMatch<TException>(String, String, RegexOptions, String, String) Throws an System.ArgumentException if the regular expression specified in pattern not finds a match in parameter , with this error message: Parameter not matches the specified regular expression. Declaration public Guard NotMatch<TException>(string parameter, string pattern, RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Compiled, string message = \"\", string parameterName = null) where TException : Exception Parameters Type Name Description System.String parameter The parameter to check. System.String pattern The regular expression pattern to match. System.Text.RegularExpressions.RegexOptions options The regular expression options. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description TException The type of the exception. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an TException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source Null<T>(T, String, String) Throws an System.ArgumentNullException if the parameter is null, with this error message: Parameter cannot be null. Declaration public Guard Null<T>(T parameter, string message = \"\", string parameterName = null) Parameters Type Name Description T parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the parameter. Exceptions Type Condition System.ArgumentNullException parameter is null . | Improve this Doc View Source NullOrEmpty(String, String, String) Throws an System.ArgumentNullException if the parameter is null or an empty string, with this error message: Parameter cannot be null or empty. Declaration public Guard NullOrEmpty(string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Exceptions Type Condition System.ArgumentNullException parameter is null . | Improve this Doc View Source NullOrWhiteSpace(String, String, String) Throws an System.ArgumentNullException if the parameter is null, an empty string or consists only of white-space, with this error message: Parameter cannot be null, empty or consists exclusively of white-space characters. Declaration public Guard NullOrWhiteSpace(string parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.String parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Exceptions Type Condition System.ArgumentNullException parameter is null . System.ArgumentException parameter is empty, or consists only of white-space. | Improve this Doc View Source Positive<T>(Nullable<T>, String, String) Throws an System.ArgumentException if the number is positive, with this error message: Number cannot be positive. Declaration public Guard Positive<T>(T? number, string message = \"\", string parameterName = null) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> number The number to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which number corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the number. Remarks If the number is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source True(Nullable<Boolean>, String, String) Throws an System.ArgumentException if the parameter is true , with this error message: Parameter cannot be true . Declaration public Guard True(bool? parameter, string message = \"\", string parameterName = null) Parameters Type Name Description System.Nullable < System.Boolean > parameter The parameter to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which parameter corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the parameter is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source True(Predicate<Boolean>, String, String) Throws an System.ArgumentException if the predicate is true , with this error message: Predicate cannot be true . Or, if the optional parameter message was set, with their message. Declaration public Guard True(Predicate<bool> predicate, string message = \"\", string parameterName = null) Parameters Type Name Description System.Predicate < System.Boolean > predicate The predicate to check. System.String message The optional error message passed to System.ArgumentException if the predicate is true . System.String parameterName The name of the parameter with which predicate corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Remarks If the predicate is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source Zero<T>(Nullable<T>, String, String) Throws an System.ArgumentException if the number is zero, with this error message: Number cannot be zero. Declaration public Guard Zero<T>(T? number, string message = \"\", string parameterName = null) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> number The number to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which number corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the number. Remarks If the number is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException . | Improve this Doc View Source ZeroOrLess<T>(Nullable<T>, String, String) Throws an System.ArgumentException if the number is zero or less than zero (i.e. negative), with this error message: 'The number cannot be zero.', if it is zero. Or 'The number cannot be negative.', if it is negative. This method is equivalent to chain the Zero(number).Negative(number) methods. Declaration public Guard ZeroOrLess<T>(T? number, string message = \"\", string parameterName = null) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> number The number to check. System.String message The optional error message that explains the reason for the exception. If this parameter is provided, it will override the error message described in the summary section. System.String parameterName The name of the parameter with which number corresponds. If you omit this parameter, the name of parameter is used. Returns Type Description Guard The guard. Type Parameters Name Description T The type of the number. Remarks If the number is null , the validation is ignored (i.e. does not throws an System.ArgumentException ). This is useful for optional parameters whose default value is null . Exceptions Type Condition System.ArgumentException ."
  },
  "api/Krafted.Guards.html": {
    "href": "api/Krafted.Guards.html",
    "title": "Namespace Krafted.Guards | Krafted",
    "keywords": "Namespace Krafted.Guards Classes Guard Provides guard clauses to validate method arguments, in order to enforce defensive programming practice. See defensive programming . See guard clauses ."
  },
  "api/Krafted.UnitTests.TestDouble.html": {
    "href": "api/Krafted.UnitTests.TestDouble.html",
    "title": "Namespace Krafted.UnitTests.TestDouble | Krafted",
    "keywords": "Namespace Krafted.UnitTests.TestDouble Classes HttpClientMockFactory Provides a Factory Method to create a HttpMessageHandlerMock . HttpMessageHandlerMock Provides a mock to the System.Net.Http.HttpClient ."
  },
  "api/Krafted.UnitTests.TestDouble.HttpClientMockFactory.html": {
    "href": "api/Krafted.UnitTests.TestDouble.HttpClientMockFactory.html",
    "title": "Class HttpClientMockFactory | Krafted",
    "keywords": "Class HttpClientMockFactory Provides a Factory Method to create a HttpMessageHandlerMock . Inheritance System.Object HttpClientMockFactory Namespace : Krafted.UnitTests.TestDouble Syntax public static class HttpClientMockFactory Methods | Improve this Doc View Source New(String, HttpStatusCode) Creates a mock to the System.Net.Http.HttpClient . HttpMessageHandlerMock Declaration public static HttpClient New(string response, HttpStatusCode statusCode) Parameters Type Name Description System.String response The response content that will be returned. System.Net.HttpStatusCode statusCode The HTTP status code that will be returned. Returns Type Description System.Net.Http.HttpClient A mock to the System.Net.Http.HttpClient ."
  },
  "api/Krafted.UnitTests.TestDouble.HttpMessageHandlerMock.html": {
    "href": "api/Krafted.UnitTests.TestDouble.HttpMessageHandlerMock.html",
    "title": "Class HttpMessageHandlerMock | Krafted",
    "keywords": "Class HttpMessageHandlerMock Provides a mock to the System.Net.Http.HttpClient . Inheritance System.Object System.Net.Http.HttpMessageHandler HttpMessageHandlerMock Implements System.IDisposable Namespace : Krafted.UnitTests.TestDouble Syntax public class HttpMessageHandlerMock : HttpMessageHandler, IDisposable Constructors | Improve this Doc View Source HttpMessageHandlerMock(String, HttpStatusCode) Initializes a new instance of the HttpMessageHandlerMock class. Declaration public HttpMessageHandlerMock(string response, HttpStatusCode statusCode) Parameters Type Name Description System.String response The response content that will be returned. System.Net.HttpStatusCode statusCode The HTTP status code that will be returned. Properties | Improve this Doc View Source NumberOfCalls Gets the number of times the method was called. Declaration public int NumberOfCalls { get; } Property Value Type Description System.Int32 The number of times the method was called. Methods | Improve this Doc View Source SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable"
  },
  "api/Krafted.UnitTests.Xunit.AssertExtension.html": {
    "href": "api/Krafted.UnitTests.Xunit.AssertExtension.html",
    "title": "Class AssertExtension | Krafted",
    "keywords": "Class AssertExtension Provides assertion methods to xUnit Xunit.Assert . Inheritance System.Object Xunit.Assert AssertExtension Namespace : Krafted.UnitTests.Xunit Syntax public class AssertExtension : Assert Methods | Improve this Doc View Source ContainsNullGuardClause<T>(Object[]) Verifies that a type contains Null Guard Clauses for all parameters of it constructor. Declaration public static void ContainsNullGuardClause<T>(params object[] parameters) where T : class Parameters Type Name Description System.Object [] parameters An array of parameters that match in number, order, and type the parameters of the constructor. Type Parameters Name Description T The type of the object to be verified. | Improve this Doc View Source DoesNotContainNullGuardClause<T>(Object[]) Verifies that a type does not contain Null Guard Clauses for any parameters of it constructor. Declaration public static void DoesNotContainNullGuardClause<T>(params object[] parameters) where T : class Parameters Type Name Description System.Object [] parameters An array of parameters that match in number, order, and type the parameters of the constructor. Type Parameters Name Description T The type of the object to be verified. | Improve this Doc View Source DoesNotThrows(Action) Verifies that no exception was thrown. Declaration public static void DoesNotThrows(Action testCode) Parameters Type Name Description System.Action testCode A delegate to the code to be tested. | Improve this Doc View Source DoesNotThrows(Func<Object>) Verifies that no exception was thrown. Declaration public static void DoesNotThrows(Func<object> testCode) Parameters Type Name Description System.Func < System.Object > testCode A delegate to the code to be tested."
  },
  "api/Krafted.UnitTests.Xunit.html": {
    "href": "api/Krafted.UnitTests.Xunit.html",
    "title": "Namespace Krafted.UnitTests.Xunit | Krafted",
    "keywords": "Namespace Krafted.UnitTests.Xunit Classes AssertExtension Provides assertion methods to xUnit Xunit.Assert . UseCultureAttribute Apply this attribute to your test method to replace the System.Threading.Thread.CurrentThread System.Globalization.CultureInfo.CurrentCulture and System.Globalization.CultureInfo.CurrentUICulture with another culture."
  },
  "api/Krafted.UnitTests.Xunit.UseCultureAttribute.html": {
    "href": "api/Krafted.UnitTests.Xunit.UseCultureAttribute.html",
    "title": "Class UseCultureAttribute | Krafted",
    "keywords": "Class UseCultureAttribute Apply this attribute to your test method to replace the System.Threading.Thread.CurrentThread System.Globalization.CultureInfo.CurrentCulture and System.Globalization.CultureInfo.CurrentUICulture with another culture. Inheritance System.Object System.Attribute Xunit.Sdk.BeforeAfterTestAttribute UseCultureAttribute Namespace : Krafted.UnitTests.Xunit Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public sealed class UseCultureAttribute : BeforeAfterTestAttribute Constructors | Improve this Doc View Source UseCultureAttribute(String) Initializes a new instance of the UseCultureAttribute class. Replaces the culture and UI culture of the current thread with culture . Declaration public UseCultureAttribute(string culture) Parameters Type Name Description System.String culture The name of the culture. Remarks This constructor overload uses culture for both Culture and UICulture . | Improve this Doc View Source UseCultureAttribute(String, String) Initializes a new instance of the UseCultureAttribute class. Replaces the culture and UI culture of the current thread with culture and uiCulture . Declaration public UseCultureAttribute(string culture, string uiCulture) Parameters Type Name Description System.String culture The name of the culture. System.String uiCulture The name of the UI culture. Properties | Improve this Doc View Source Culture Gets the culture. Declaration public CultureInfo Culture { get; } Property Value Type Description System.Globalization.CultureInfo The culture. | Improve this Doc View Source UICulture Gets the UI culture. Declaration public CultureInfo UICulture { get; } Property Value Type Description System.Globalization.CultureInfo The UI culture. Methods | Improve this Doc View Source After(MethodInfo) Restores the original System.Globalization.CultureInfo.CurrentCulture and System.Globalization.CultureInfo.CurrentUICulture to System.Threading.Thread.CurrentPrincipal . Declaration public override void After(MethodInfo methodUnderTest) Parameters Type Name Description System.Reflection.MethodInfo methodUnderTest The method under test. Overrides Xunit.Sdk.BeforeAfterTestAttribute.After(System.Reflection.MethodInfo) | Improve this Doc View Source Before(MethodInfo) Stores the current System.Threading.Thread.CurrentPrincipal System.Globalization.CultureInfo.CurrentCulture and System.Globalization.CultureInfo.CurrentUICulture and replaces them with the new cultures defined in the constructor. Declaration public override void Before(MethodInfo methodUnderTest) Parameters Type Name Description System.Reflection.MethodInfo methodUnderTest The method under test. Overrides Xunit.Sdk.BeforeAfterTestAttribute.Before(System.Reflection.MethodInfo)"
  },
  "api/Krafted.ValueObjects.ActivatorHelper.html": {
    "href": "api/Krafted.ValueObjects.ActivatorHelper.html",
    "title": "Class ActivatorHelper | Krafted",
    "keywords": "Class ActivatorHelper When using Entity Framework with Lazy Loading, provides a helper method to bypass the Guard Clauses via reflection, during the Value Object materialization. Inheritance System.Object ActivatorHelper Namespace : Krafted.ValueObjects Syntax public static class ActivatorHelper Remarks Because of lazy loading, when EF starts to materialize a Value Object via their public constructor, the value of the parameter is the default value of their type (in this case, null). Consequently, if that Value Object contains a Guard Clause in their public constructor, to Guard Against the default value, an ArgumentNullException would be thrown. For example, this would happen if the follow Value Object was mapped without the ActivatorHelper.CreateInstance() : public sealed class Name : ValueObject{string} { public Name(string value) { Guard.Against .NullOrWhiteSpace(value, nameof(value)) // An exception would be thrown here. .Length(2, 60, value, nameof(value)); // An exception would be thrown here. Value = value; } ... }</code></pre> The CreateInstance method checks if the value is null or empty, and if it is, it creates the instance through the private constructor via reflection, to bypass the Guard Clauses, thus avoiding an exception. Otherwise, it create the instance through the public constructor. The value will only be null when the EF does the mapping and starts to materialize the entity, because at that time the value has not yet been loaded. Methods | Improve this Doc View Source CreateInstance<TValueObject>(DateTime) Creates a new instance of a Value Object for EF mapping when using Entity Framework with Lazy Loading. This method checks if the value is the DateTime default, and if it is, it creates the instance through the private constructor via reflection, to bypass the Guard Clauses, thus avoiding an exception. Otherwise, it create the instance through the public constructor. The value will only be the DateTime default when the EF does the mapping and starts to materialize the entity, because at that time the value has not yet been loaded. Declaration public static TValueObject CreateInstance<TValueObject>(DateTime value) Parameters Type Name Description System.DateTime value The value. Returns Type Description TValueObject A new instance of the Value Object. Type Parameters Name Description TValueObject The type of the Value Object. | Improve this Doc View Source CreateInstance<TValueObject>(String) Creates a new instance of a Value Object for EF mapping when using Entity Framework with Lazy Loading. This method checks if the value is null or empty, and if it is, it creates the instance through the private constructor via reflection, to bypass the Guard Clauses, thus avoiding an exception. Otherwise, it create the instance through the public constructor. The value will only be null when the EF does the mapping and starts to materialize the entity, because at that time the value has not yet been loaded. Declaration public static TValueObject CreateInstance<TValueObject>(string value) Parameters Type Name Description System.String value The value. Returns Type Description TValueObject A new instance of the Value Object. Type Parameters Name Description TValueObject The type of the Value Object."
  },
  "api/Krafted.ValueObjects.Br.Cnpj.html": {
    "href": "api/Krafted.ValueObjects.Br.Cnpj.html",
    "title": "Class Cnpj | Krafted",
    "keywords": "Class Cnpj Represents a Brazilian legal entity and other types of legal arrangement value object. CNPJ stands for \"Cadastro Nacional da Pessoa Jurídica\" in Brazil. It's used to identify a legal entity and other types of legal arrangement without legal personality (such as condominiums, public agencies, funds) in Brazil. See more . Inheritance System.Object ValueObject < System.String > Cnpj Implements IValueObjectMasked Namespace : Krafted.ValueObjects.Br Syntax public class Cnpj : ValueObject<string>, IValueObjectMasked Constructors | Improve this Doc View Source Cnpj(String) Initializes a new instance of the Cnpj class. Declaration public Cnpj(string value) Parameters Type Name Description System.String value The value. Methods | Improve this Doc View Source NewCnpj(String) Initializes a new instance of the Cnpj class. Declaration public static Cnpj NewCnpj(string value) Parameters Type Name Description System.String value The value. Returns Type Description Cnpj A new instance of the Cnpj class. | Improve this Doc View Source ToString(Boolean) Returns the string representation of the CNPJ Value . If the masked argument is true , the Value is masked; otherwise, the Value is unmasked. Declaration public string ToString(bool masked = false) Parameters Type Name Description System.Boolean masked Whether to mask or not the Value (default false). Returns Type Description System.String The string representation of the CNPJ Value , either masked or unmasked. Remarks Examples: string cnpj = \"47158571894466\"; cnpj.ToString() -> \"47158571894466\" string cnpj = \"47158571894466\"; cnpj.ToString(false) -> \"47158571894466\" string cnpj = \"47158571894466\"; cnpj.ToString(true) -> \"47.158.571/8944-66\" Operators | Improve this Doc View Source Explicit(String to Cnpj) Performs an explicit conversion from System.String to Cnpj . Declaration public static explicit operator Cnpj(string value) Parameters Type Name Description System.String value The value. Returns Type Description Cnpj The result of the conversion. Implements IValueObjectMasked"
  },
  "api/Krafted.ValueObjects.Br.Cpf.html": {
    "href": "api/Krafted.ValueObjects.Br.Cpf.html",
    "title": "Class Cpf | Krafted",
    "keywords": "Class Cpf Represents a Brazilian individual taxpayer identification number value object. CPF stands for \"Cadastro de Pessoa Física\" in Brazil. It's used to identify an individual taxpayer in Brazil. See more . Inheritance System.Object ValueObject < System.String > Cpf Implements IValueObjectMasked Namespace : Krafted.ValueObjects.Br Syntax public class Cpf : ValueObject<string>, IValueObjectMasked Constructors | Improve this Doc View Source Cpf(String) Initializes a new instance of the Cpf class. Declaration public Cpf(string value) Parameters Type Name Description System.String value The value. Methods | Improve this Doc View Source NewCpf(String) Initializes a new instance of the Cpf class. Declaration public static Cpf NewCpf(string value) Parameters Type Name Description System.String value The value. Returns Type Description Cpf A new instance of the Cpf class. | Improve this Doc View Source ToString(Boolean) Returns the string representation of the CPF Value . If the masked argument is true , the Value is masked; otherwise, the Value is unmasked. Declaration public string ToString(bool masked = false) Parameters Type Name Description System.Boolean masked Whether to mask or not the Value (default false). Returns Type Description System.String The string representation of the CPF Value , either masked or unmasked. Remarks Examples: string cpf = \"07575768009\"; cpf.ToString() -> \"07575768009\" string cpf = \"07575768009\"; cpf.ToString(false) -> \"07575768009\" string cpf = \"07575768009\"; cpf.ToString(true) -> \"075.757.680-09\" Operators | Improve this Doc View Source Explicit(String to Cpf) Performs an explicit conversion from System.String to Cpf . Declaration public static explicit operator Cpf(string value) Parameters Type Name Description System.String value The value. Returns Type Description Cpf The result of the conversion. Implements IValueObjectMasked"
  },
  "api/Krafted.ValueObjects.Br.html": {
    "href": "api/Krafted.ValueObjects.Br.html",
    "title": "Namespace Krafted.ValueObjects.Br | Krafted",
    "keywords": "Namespace Krafted.ValueObjects.Br Classes Cnpj Represents a Brazilian legal entity and other types of legal arrangement value object. CNPJ stands for \"Cadastro Nacional da Pessoa Jurídica\" in Brazil. It's used to identify a legal entity and other types of legal arrangement without legal personality (such as condominiums, public agencies, funds) in Brazil. See more . Cpf Represents a Brazilian individual taxpayer identification number value object. CPF stands for \"Cadastro de Pessoa Física\" in Brazil. It's used to identify an individual taxpayer in Brazil. See more ."
  },
  "api/Krafted.ValueObjects.Email.html": {
    "href": "api/Krafted.ValueObjects.Email.html",
    "title": "Class Email | Krafted",
    "keywords": "Class Email Represents an email value object. Inheritance System.Object ValueObject < System.String > Email Namespace : Krafted.ValueObjects Syntax public sealed class Email : ValueObject<string> Constructors | Improve this Doc View Source Email(String) Initializes a new instance of the Email class. Declaration public Email(string value) Parameters Type Name Description System.String value The value. Methods | Improve this Doc View Source NewEmail(String) Initializes a new instance of the Email class. Declaration public static Email NewEmail(string value) Parameters Type Name Description System.String value The value. Returns Type Description Email A new instance of the Email class. Operators | Improve this Doc View Source Explicit(String to Email) Performs an explicit conversion from System.String to Email . Declaration public static explicit operator Email(string value) Parameters Type Name Description System.String value The value. Returns Type Description Email The result of the conversion."
  },
  "api/Krafted.ValueObjects.html": {
    "href": "api/Krafted.ValueObjects.html",
    "title": "Namespace Krafted.ValueObjects | Krafted",
    "keywords": "Namespace Krafted.ValueObjects Classes ActivatorHelper When using Entity Framework with Lazy Loading, provides a helper method to bypass the Guard Clauses via reflection, during the Value Object materialization. Email Represents an email value object. Money Represents an money value object. Url Represents an URL (Uniform Resource Locator) value object. ValueObject Represents an Value Object [Evans] base class, providing common operations to value objects. ValueObject<T> Represents a Value Object base class for a single value, providing common operations to value objects. See Value . Interfaces IValueObjectMasked Defines a ToString(bool masked = false) method to return the string representation of the Value Object, either masked or unmasked."
  },
  "api/Krafted.ValueObjects.IValueObjectMasked.html": {
    "href": "api/Krafted.ValueObjects.IValueObjectMasked.html",
    "title": "Interface IValueObjectMasked | Krafted",
    "keywords": "Interface IValueObjectMasked Defines a ToString(bool masked = false) method to return the string representation of the Value Object, either masked or unmasked. Namespace : Krafted.ValueObjects Syntax public interface IValueObjectMasked Methods | Improve this Doc View Source ToString(Boolean) Returns the string representation of the Value Object, either masked or unmasked. If the masked argument is true , the Value is masked; otherwise, the Value is unmasked. Declaration string ToString(bool masked = false) Parameters Type Name Description System.Boolean masked Whether to mask or not the Value (default false). Returns Type Description System.String The string representation of the Value Object, either masked or unmasked."
  },
  "api/Krafted.ValueObjects.Money.html": {
    "href": "api/Krafted.ValueObjects.Money.html",
    "title": "Class Money | Krafted",
    "keywords": "Class Money Represents an money value object. Inheritance System.Object ValueObject < System.Decimal > Money Namespace : Krafted.ValueObjects Syntax public sealed class Money : ValueObject<decimal> Constructors | Improve this Doc View Source Money(Decimal) Initializes a new instance of the Money class. Declaration public Money(decimal value) Parameters Type Name Description System.Decimal value The value. Properties | Improve this Doc View Source IntegralPart Gets the integral part. Declaration public int IntegralPart { get; } Property Value Type Description System.Int32 The integral part. | Improve this Doc View Source Value Gets or sets the value. Declaration public override decimal Value { get; protected set; } Property Value Type Description System.Decimal The value. Overrides Krafted.ValueObjects.ValueObject<System.Decimal>.Value Methods | Improve this Doc View Source NewMoney(Decimal) Initializes a new instance of the Money class. Declaration public static Money NewMoney(decimal value) Parameters Type Name Description System.Decimal value The value. Returns Type Description Money A new instance of the Money class. | Improve this Doc View Source ToString() Returns the string representation of Value rounding to 2 decimal places. Declaration public override string ToString() Returns Type Description System.String The the string representation of Value . Overrides Krafted.ValueObjects.ValueObject<System.Decimal>.ToString() Remarks Examples: decimal d = 0M; d.ToString() -> 0.00 decimal d = 0.0M; d.ToString() -> 0.00 decimal d = 0.00M; d.ToString() -> 0.00 decimal d = 0.01M; d.ToString() -> 0.01 decimal d = 0.1M; d.ToString() -> 0.10 decimal d = 0.10M; d.ToString() -> 0.10 decimal d = 00.1M; d.ToString() -> 0.10 decimal d = 1M; d.ToString() -> 1.00 decimal d = 1.1M; d.ToString() -> 1.10 decimal d = 1.01M; d.ToString() -> 1.01 | Improve this Doc View Source ToString(IFormatProvider) Returns the string representation of Value rounding to 2 decimal places. Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description System.String The string representation of Value . Overrides Krafted.ValueObjects.ValueObject<System.Decimal>.ToString(System.IFormatProvider) Remarks Examples: decimal d = 0M; d.ToString() -> 0.00 decimal d = 0.0M; d.ToString() -> 0.00 decimal d = 0.00M; d.ToString() -> 0.00 decimal d = 0.01M; d.ToString() -> 0.01 decimal d = 0.1M; d.ToString() -> 0.10 decimal d = 0.10M; d.ToString() -> 0.10 decimal d = 00.1M; d.ToString() -> 00.01 decimal d = 1M; d.ToString() -> 1.00 decimal d = 1.1M; d.ToString() -> 1.10 decimal d = 1.01M; d.ToString() -> 1.01 Operators | Improve this Doc View Source Addition(Money, Decimal) Implements the operator +. Declaration public static Money operator +(Money money, decimal value) Parameters Type Name Description Money money The money. System.Decimal value The value. Returns Type Description Money The result of the operator. | Improve this Doc View Source Explicit(Decimal to Money) Performs an explicit conversion from System.Decimal to Money . Declaration public static explicit operator Money(decimal value) Parameters Type Name Description System.Decimal value The value. Returns Type Description Money The result of the conversion. | Improve this Doc View Source Implicit(Money to Decimal) Performs an implicit conversion from Money to System.Decimal . Declaration public static implicit operator decimal (Money value) Parameters Type Name Description Money value The value. Returns Type Description System.Decimal The result of the conversion. | Improve this Doc View Source Subtraction(Money, Decimal) Implements the operator -. Declaration public static Money operator -(Money money, decimal value) Parameters Type Name Description Money money The money. System.Decimal value The value. Returns Type Description Money The result of the operator."
  },
  "api/Krafted.ValueObjects.Pt.html": {
    "href": "api/Krafted.ValueObjects.Pt.html",
    "title": "Namespace Krafted.ValueObjects.Pt | Krafted",
    "keywords": "Namespace Krafted.ValueObjects.Pt Classes Nif Represents a Portuguese individual taxpayer identification number value object. NIF stands for \"Número de Identificação Fiscal\" in Portugal. It's used to identify an individual or legal entity taxpayer in Portugal. See more ."
  },
  "api/Krafted.ValueObjects.Pt.Nif.html": {
    "href": "api/Krafted.ValueObjects.Pt.Nif.html",
    "title": "Class Nif | Krafted",
    "keywords": "Class Nif Represents a Portuguese individual taxpayer identification number value object. NIF stands for \"Número de Identificação Fiscal\" in Portugal. It's used to identify an individual or legal entity taxpayer in Portugal. See more . Inheritance System.Object ValueObject < System.String > Nif Namespace : Krafted.ValueObjects.Pt Syntax public sealed class Nif : ValueObject<string> Constructors | Improve this Doc View Source Nif(String) Initializes a new instance of the Nif class. Declaration public Nif(string value) Parameters Type Name Description System.String value The value. Methods | Improve this Doc View Source NewNif(String) Initializes a new instance of the Nif class. Declaration public static Nif NewNif(string value) Parameters Type Name Description System.String value The value. Returns Type Description Nif A new instance of the Nif class. Operators | Improve this Doc View Source Explicit(String to Nif) Performs an explicit conversion from System.String to Nif . Declaration public static explicit operator Nif(string value) Parameters Type Name Description System.String value The value. Returns Type Description Nif The result of the conversion."
  },
  "api/Krafted.ValueObjects.Url.html": {
    "href": "api/Krafted.ValueObjects.Url.html",
    "title": "Class Url | Krafted",
    "keywords": "Class Url Represents an URL (Uniform Resource Locator) value object. Inheritance System.Object ValueObject < System.String > Url Namespace : Krafted.ValueObjects Syntax public sealed class Url : ValueObject<string> Constructors | Improve this Doc View Source Url(String) Initializes a new instance of the Url class. Declaration public Url(string value) Parameters Type Name Description System.String value The value. Methods | Improve this Doc View Source NewUrl(String) Initializes a new instance of the Url class. Declaration public static Url NewUrl(string value) Parameters Type Name Description System.String value The value. Returns Type Description Url A new instance of the Url class. Operators | Improve this Doc View Source Explicit(String to Url) Performs an explicit conversion from System.String to Url . Declaration public static explicit operator Url(string value) Parameters Type Name Description System.String value The value. Returns Type Description Url The result of the conversion."
  },
  "api/Krafted.ValueObjects.ValueObject.html": {
    "href": "api/Krafted.ValueObjects.ValueObject.html",
    "title": "Class ValueObject | Krafted",
    "keywords": "Class ValueObject Represents an Value Object [Evans] base class, providing common operations to value objects. Inheritance System.Object ValueObject Namespace : Krafted.ValueObjects Syntax public abstract class ValueObject Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetCopy() Creates a shallow copy of the current ValueObject . Declaration public ValueObject GetCopy() Returns Type Description ValueObject A shallow copy of the current ValueObject . | Improve this Doc View Source GetEqualityComponents() Gets the equality components. Declaration protected abstract IEnumerable<object> GetEqualityComponents() Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The equality components. Remarks This method must be implemented by the value objects that inherit from this class, to make the comparison between all the attributes (since a value object must not be based on identity). protected override IEnumerable{object} GetEqualityComponents() { // Using a yield return statement to return each element one at a time yield return Street; yield return City; yield return State; yield return Country; yield return ZipCode; } | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() Operators | Improve this Doc View Source Equality(ValueObject, ValueObject) Implements the operator ==. Declaration public static bool operator ==(ValueObject a, ValueObject b) Parameters Type Name Description ValueObject a The value object a. ValueObject b The value object b. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(ValueObject, ValueObject) Implements the operator !=. Declaration public static bool operator !=(ValueObject a, ValueObject b) Parameters Type Name Description ValueObject a The value object a. ValueObject b The value object b. Returns Type Description System.Boolean The result of the operator."
  },
  "api/Krafted.ValueObjects.ValueObject-1.html": {
    "href": "api/Krafted.ValueObjects.ValueObject-1.html",
    "title": "Class ValueObject<T> | Krafted",
    "keywords": "Class ValueObject<T> Represents a Value Object base class for a single value, providing common operations to value objects. See Value . Inheritance System.Object ValueObject<T> Cnpj Cpf Email Money Nif Url Namespace : Krafted.ValueObjects Syntax public abstract class ValueObject<T> where T : IComparable, IComparable<T>, IConvertible, IEquatable<T> Type Parameters Name Description T The type of the value. Properties | Improve this Doc View Source Value Gets or sets the value. Declaration public virtual T Value { get; protected set; } Property Value Type Description T The value. Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetCopy() Creates a shallow copy of the current ValueObject<T> . Declaration public ValueObject<T> GetCopy() Returns Type Description ValueObject <T> A shallow copy of the current ValueObject<T> . | Improve this Doc View Source GetEqualityComponents() Gets the equality components to make the comparison, since a value object must not be based on identity. Declaration protected IEnumerable<object> GetEqualityComponents() Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The equality components. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Returns the string representation of Value . Declaration public override string ToString() Returns Type Description System.String The string representation of Value . Overrides System.Object.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns the string representation of Value as specified by System.IFormatProvider provider. Declaration public virtual string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description System.String The string representation of Value as specified by System.IFormatProvider provider. Operators | Improve this Doc View Source Equality(ValueObject<T>, ValueObject<T>) Implements the operator ==. Declaration public static bool operator ==(ValueObject<T> a, ValueObject<T> b) Parameters Type Name Description ValueObject <T> a The value object a. ValueObject <T> b The value object b. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(ValueObject<T>, ValueObject<T>) Implements the operator !=. Declaration public static bool operator !=(ValueObject<T> a, ValueObject<T> b) Parameters Type Name Description ValueObject <T> a The value object a. ValueObject <T> b The value object b. Returns Type Description System.Boolean The result of the operator."
  },
  "api/System.Collections.Generic.EnumerableExtension.html": {
    "href": "api/System.Collections.Generic.EnumerableExtension.html",
    "title": "Class EnumerableExtension | Krafted",
    "keywords": "Class EnumerableExtension Provides extension methods to System.Collections.Generic.IEnumerable<T> . Inheritance System.Object EnumerableExtension Namespace : System.Collections.Generic Syntax public static class EnumerableExtension Methods | Improve this Doc View Source ContainsAll<T>(IEnumerable<T>, IEnumerable<T>) Verifies if the enumerable contains all the values. Declaration public static bool ContainsAll<T>(this IEnumerable<T> source, IEnumerable<T> values) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source where find. System.Collections.Generic.IEnumerable <T> values The value to find ind source. Returns Type Description System.Boolean True if all itens where found in source, otherwise false. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source Empty<T>(IEnumerable<T>) Determines whether a sequence not contains any elements. Declaration public static bool Empty<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. Returns Type Description System.Boolean true if the source sequence not contains any elements; otherwise, false . Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source Fifth<T>(IEnumerable<T>) Returns the fifth element of a sequence. Declaration public static T Fifth<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. Returns Type Description T The fifth element in the specified sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source Fourth<T>(IEnumerable<T>) Returns the fourth element of a sequence. Declaration public static T Fourth<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. Returns Type Description T The fourth element in the specified sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source Second<T>(IEnumerable<T>) Returns the second element of a sequence. Declaration public static T Second<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. Returns Type Description T The second element in the specified sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source Third<T>(IEnumerable<T>) Returns the third element of a sequence. Declaration public static T Third<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. Returns Type Description T The third element in the specified sequence. Type Parameters Name Description T The type of the elements of source."
  },
  "api/System.Collections.Generic.html": {
    "href": "api/System.Collections.Generic.html",
    "title": "Namespace System.Collections.Generic | Krafted",
    "keywords": "Namespace System.Collections.Generic Classes EnumerableExtension Provides extension methods to System.Collections.Generic.IEnumerable<T> . ListExtension Provides extension methods to System.Collections.Generic.IList<T> ."
  },
  "api/System.Collections.Generic.ListExtension.html": {
    "href": "api/System.Collections.Generic.ListExtension.html",
    "title": "Class ListExtension | Krafted",
    "keywords": "Class ListExtension Provides extension methods to System.Collections.Generic.IList<T> . Inheritance System.Object ListExtension Namespace : System.Collections.Generic Syntax public static class ListExtension Methods | Improve this Doc View Source Move<T>(IList<T>, Int32, Int32) Moves an item from a specified old index to a specified new index. Declaration public static void Move<T>(this IList<T> list, int oldIndex, int newIndex) Parameters Type Name Description System.Collections.Generic.IList <T> list The list. System.Int32 oldIndex The old index. System.Int32 newIndex The new index. Type Parameters Name Description T The type of the elements of source."
  },
  "api/System.EnumExtension.html": {
    "href": "api/System.EnumExtension.html",
    "title": "Class EnumExtension | Krafted",
    "keywords": "Class EnumExtension Provides extension methods to System.Enum . Inheritance System.Object EnumExtension Namespace : System Syntax public static class EnumExtension Methods | Improve this Doc View Source GetDisplayName(Enum, Boolean) Gets the enum display name. Declaration public static string GetDisplayName(this Enum input, bool fallback = false) Parameters Type Name Description System.Enum input The enum constant to get the display name from. System.Boolean fallback When true , if the enum constant is not decorated with the System.ComponentModel.DataAnnotations.DisplayAttribute , fall-backs the enum constant string representation. Returns Type Description System.String The enum display name. Exceptions Type Condition System.ArgumentException Throws when the enum constant '{input}' is not decorated with the System.ComponentModel.DataAnnotations.DisplayAttribute and the fallback is false ."
  },
  "api/System.GuidExtension.html": {
    "href": "api/System.GuidExtension.html",
    "title": "Class GuidExtension | Krafted",
    "keywords": "Class GuidExtension Provides extension methods to System.Guid . Inheritance System.Object GuidExtension Namespace : System Syntax public static class GuidExtension Methods | Improve this Doc View Source IsEmpty(Guid) Checks whether this System.Guid is a System.Guid.Empty . Declaration public static bool IsEmpty(this Guid input) Parameters Type Name Description System.Guid input The System.Guid . Returns Type Description System.Boolean true if this System.Guid is a System.Guid.Empty ; otherwise, false ."
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | Krafted",
    "keywords": "Namespace System Classes EnumExtension Provides extension methods to System.Enum . GuidExtension Provides extension methods to System.Guid . StringExtension Provides extension methods to System.String ."
  },
  "api/System.Net.Http.html": {
    "href": "api/System.Net.Http.html",
    "title": "Namespace System.Net.Http | Krafted",
    "keywords": "Namespace System.Net.Http Classes HttpResponseMessageExtension Provides extension methods to System.Net.Http.HttpResponseMessage ."
  },
  "api/System.Net.Http.HttpResponseMessageExtension.html": {
    "href": "api/System.Net.Http.HttpResponseMessageExtension.html",
    "title": "Class HttpResponseMessageExtension | Krafted",
    "keywords": "Class HttpResponseMessageExtension Provides extension methods to System.Net.Http.HttpResponseMessage . Inheritance System.Object HttpResponseMessageExtension Namespace : System.Net.Http Syntax public static class HttpResponseMessageExtension Methods | Improve this Doc View Source DeserializeAsync<T>(HttpResponseMessage, Boolean) Deserializes the System.Net.Http.HttpResponseMessage into a T . Declaration public static async Task<T> DeserializeAsync<T>(this HttpResponseMessage response, bool propertyNameCaseInsensitive = true) Parameters Type Name Description System.Net.Http.HttpResponseMessage response The HttpResponse. System.Boolean propertyNameCaseInsensitive Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization. The default value is false. Returns Type Description System.Threading.Tasks.Task <T> The deserialized T from the System.Net.Http.HttpResponseMessage . Type Parameters Name Description T The type to deserialize to. | Improve this Doc View Source EnsureContentType(HttpResponseMessage, String) Throws an exception if the System.Net.Http.HttpResponseMessage.Headers.ContentType property for the HTTP response is different of defaultContentType argument, whose default value is \"application/json; charset=utf-8\". Declaration public static HttpResponseMessage EnsureContentType(this HttpResponseMessage response, string defaultContentType = \"application/json; charset=utf-8\") Parameters Type Name Description System.Net.Http.HttpResponseMessage response The response. System.String defaultContentType The default content type. That is: application/json; charset=utf-8. Returns Type Description System.Net.Http.HttpResponseMessage The HTTP response message if the call is successful. Exceptions Type Condition System.Net.Http.HttpRequestException The HTTP response content type is different of the expected. System.ArgumentNullException The response is null."
  },
  "api/System.StringExtension.html": {
    "href": "api/System.StringExtension.html",
    "title": "Class StringExtension | Krafted",
    "keywords": "Class StringExtension Provides extension methods to System.String . Inheritance System.Object StringExtension Namespace : System Syntax public static class StringExtension Methods | Improve this Doc View Source DecodeFromBase64String(String) Converts a base-64 string to its equivalent decoded string. Declaration public static string DecodeFromBase64String(this string input) Parameters Type Name Description System.String input The base-64 string to be decoded. Returns Type Description System.String The decoded string. | Improve this Doc View Source EncodeToBase64String(String) Converts an string to its equivalent encoded with base-64. Declaration public static string EncodeToBase64String(this string input) Parameters Type Name Description System.String input The string to be encoded with base-64. Returns Type Description System.String The base-64 encoded string. | Improve this Doc View Source Format(String, Object[]) Replaces the format items in a string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information. Declaration public static string Format(this string input, params object[] args) Parameters Type Name Description System.String input A composite string to be formated. System.Object [] args An object array that contains objects to format the value . Returns Type Description System.String A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args. | Improve this Doc View Source PascalCaseToSnakeCase(String) Converts a specified PascalCase string to its Snake_Case representation (that is. underscore separation). Declaration public static string PascalCaseToSnakeCase(this string input) Parameters Type Name Description System.String input A PascalCase string to be transformed to a Snake_Case string. Returns Type Description System.String The Snake_Case representation of this PascalCase string. Examples \"MyPascalCaseString\".PascalCaseToSnakeCase() // \"My_Camel_Case_String\" | Improve this Doc View Source Remove(String, String) In a specified input string, removes all strings that match a specified regular expression with a specified replacement string. Declaration public static string Remove(this string input, string pattern) Parameters Type Name Description System.String input The string to search for a match. System.String pattern The regular expression pattern to match. Returns Type Description System.String A new string that is identical to the input string, except that the empty string takes the place of each matched string. If pattern is not matched in the current instance, the method returns the current instance unchanged. | Improve this Doc View Source Replace(String, String, String, RegexOptions) In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Declaration public static string Replace(this string input, string pattern, string replacement, RegexOptions options) Parameters Type Name Description System.String input The string to search for a match. System.String pattern The regular expression pattern to match. System.String replacement The replacement string. System.Text.RegularExpressions.RegexOptions options A bitwise combination of the enumeration values that provide options for matching. Returns Type Description System.String A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If pattern is not matched in the current instance, the method returns the current instance unchanged. | Improve this Doc View Source ToSlug(String, Int32) Converts a phrase to its slug representation. Declaration public static string ToSlug(this string input, int maxLength = 60) Parameters Type Name Description System.String input The phrase to be transformed to slug format. System.Int32 maxLength The maximum length before the input be truncated. Default=60. Returns Type Description System.String The slug representation of this phrase. Examples \"A persistência é o caminho do êxito\".ToSlug() // \"a-persistencia-e-o-caminho-do-exito\""
  },
  "articles/data-annotations.html": {
    "href": "articles/data-annotations.html",
    "title": "DataAnnotations | Krafted",
    "keywords": "DataAnnotations What is / what is it for? A set of DataAnnotations attributes for validations. Where should I use it? DataAnnotations provides validation attributes that are applied declaratively to a ViewModel class or ViewModel property in order to validate the data. Samples Below are some examples of each DataAnnotations contained in this package. NifAttribute Validates whether the specified nif is valid. NIF means \"Número de Identificação Fiscal\", a.k.a \"Número de Contribuinte\", identifies a taxpayer entity in Portugal, whether it is a company or an individual. public class NifViewModelDummy { [Nif] public string MyProperty1 { get; set; } [Nif(ErrorMessage = \"The nif should be valid.\")] public string MyProperty2 { get; set; } } EmailAddressRegexAttribute Validates whether the specified email address is valid using regular expression. public class EmailModelDummy { [EmailAddressRegex] public string MyProperty1 { get; set; } [EmailAddressRegex(ErrorMessage = \"The e-mail should be valid.\")] public string MyProperty2 { get; set; } } MinOneAttribute Specifies that the value is at minimum one (that is, positive). public class MinOneIntModelDummy { [MinOne] public int MyProperty1 { get; set; } [MinOne(ErrorMessage = \"The number should be positive.\")] public int MyProperty2 { get; set; } } public class MinOneLongModelDummy { [MinOne] public long MyProperty1 { get; set; } [MinOne(ErrorMessage = \"The number should be positive.\")] public long MyProperty2 { get; set; } } NotEmptyCollectionAttribute Specifies that at least one item is required in the collection. public class NotEmptyCollectionModelDummy { [NotEmptyCollection] public IEnumerable<int> MyProperty1 { get; set; } [NotEmptyCollection(ErrorMessage = \"Provide at least one item.\")] public IEnumerable<int> MyProperty2 { get; set; } } Validation is automatic, but in some cases, you might want to manually validate your ViewModel. In this case, you can use the ModelValidator helper class: [Fact] public void IsValid_Empty_False() { var model = new NotEmptyCollectionModelDummy(); var (isValid, validationResults) = ModelValidator.Validate(model); Assert.False(isValid); Assert.Equal(\"At least one item is required.\", validationResults[0].ErrorMessage); Assert.Equal(\"Provide at least one item.\", validationResults[1].ErrorMessage); } [Theory] [InlineData(new int[] { 1 })] [InlineData(new int[] { 1, 2 })] [InlineData(new int[] { 1, 2, 3 })] public void IsValid_NotEmpty_True(int[] items) { var model = new NotEmptyCollectionModelDummy { MyProperty1 = items, MyProperty2 = items }; var (isValid, validationResults) = ModelValidator.Validate(model); Assert.True(isValid); Assert.Empty(validationResults); }"
  },
  "articles/design-patterns.html": {
    "href": "articles/design-patterns.html",
    "title": "Design Patterns | Krafted",
    "keywords": "Design Patterns What is / what is it for / where should I use it? A set of building blocks and participants to implement Design Patterns of GoF and others. Design patterns make it easier to reuse successful designs and architectures. Expressing proven techniques as design patterns makes them more accessible to developers of new systems. Design patterns help you choose design alternatives that make a system reusable and avoid alternatives that compromise reusability. Design patterns can even improve the documentation and maintenance of existing systems by furnishing an explicit specification of class and object interactions and their underlying intent. Put simply, design patterns help a designer get a design \"right\" faster. Gamma, Helm, Johnson, Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. (1994) Samples Below are some examples of each Design Pattern contained in this package. Specification Pattern A Specification Pattern implementation. This implementation is based on the excellent course: Specification Pattern in C# Pluralsight by Vladimir Khorikov. Course: https://app.pluralsight.com/library/courses/csharp-specification-pattern/table-of-contents Source: https://github.com/vkhorikov/SpecPattern Retrieved in July 2020. [Fact] public void JobForSeniorEngineerSpecification_IsSatisfiedByJobApplicant_True() { // Arrange var applicant = new JobApplicant( \"John\", EngineeringLevel.SeniorEngineer, ProgrammingLanguage.JavaScript, 10); var spec = new JobForSeniorEngineerSpecification(); // Act - Assert Assert.True(spec.IsSatisfiedBy(applicant)); } [Fact] public void JobForCompositeSpecification_IsSatisfiedByJobApplicant_True() { // Arrange var applicant = new JobApplicant( \"Peter\", EngineeringLevel.SeniorEngineer, ProgrammingLanguage.CSharp, 15); var spec = Specification<JobApplicant>.Default .And(new JobForLevelSpecification(EngineeringLevel.SoftwareEngineer)) .Or(new JobForLevelSpecification(EngineeringLevel.SeniorEngineer)) .Or(new JobForLevelSpecification(EngineeringLevel.StaffEngineer)) .And(new JobForCSharpSpecification()) .And(new MinimumYearsOfExperienceSpecification(10)); // Act - Assert Assert.True(spec.IsSatisfiedBy(applicant)); } [Fact] public void GetJobsWithCompositeSpecification_CompositeSpecification_NotNull() { // Arrange var spec = Specification<JobApplicant>.Default .And(new JobForLevelSpecification(EngineeringLevel.SoftwareEngineer)) .Or(new JobForLevelSpecification(EngineeringLevel.SeniorEngineer)) .Or(new JobForLevelSpecification(EngineeringLevel.StaffEngineer)) .And(new JobForCSharpSpecification()) .And(new MinimumYearsOfExperienceSpecification(10)); var jobs = await _jobRepository.ListAsync(spec); // Act - Assert Assert.NotNull(jobs); }"
  },
  "articles/extensions.html": {
    "href": "articles/extensions.html",
    "title": "Extension Methods | Krafted",
    "keywords": "Extension Methods What is / what is it for? A set of extension methods for String, Collections, Guid and other types. Samples Below are some examples of each extension method contained in this package. Enumerable Provides extension methods to IEnumerable<T>. ContainsAll Verifies if the enumerable contains all the values: [Fact] public void ContainsAll_Itens_True() { var source = new int[] { 1, 2, 3 }; var values = new int[] { 1, 2, 3 }; Assert.True(source.ContainsAll(values)); source = new int[] { 1, 2, 3 }; values = new int[] { 1, 2 }; Assert.True(source.ContainsAll(values)); } [Fact] public void ContainsAll_Itens_False() { var source = new int[] { 1, 2, 3 }; var values = new int[] { 1, 2, 3, 4 }; Assert.False(source.ContainsAll(values)); source = new int[] { 1, 2, 3 }; values = new int[] { 4 }; Assert.False(source.ContainsAll(values)); } Second , Third , Fourth , Fifth Like the items.First(), returns the element of a sequence by their ordinal number. [Fact] public void Ordinal_Itens_Ok() { var itens1 = new int[] { 1, 2, 3, 4, 5 }; Assert.Equal(2, itens1.Second()); Assert.Equal(3, itens1.Third()); Assert.Equal(4, itens1.Fourth()); Assert.Equal(5, itens1.Fifth()); var itens2 = new string[] { \"A\", \"B\", \"C\", \"D\", \"E\" }; Assert.Equal(\"B\", itens2.Second()); Assert.Equal(\"C\", itens2.Third()); Assert.Equal(\"D\", itens2.Fourth()); Assert.Equal(\"E\", itens2.Fifth()); } Empty Determines whether a sequence not contains any elements (a cleaner alternative to !items.Any() ). [Fact] public void Empty_SourceContainsElements_False() { var source = new int[] { 1, 2, 3, 4, 5 }; Assert.False(source.Empty()); } [Fact] public void Empty_SourceNotContainsElements_True() { var source = new int[] { }; Assert.True(source.Empty()); } Guid Provides extension methods to Guid . IsEmpty Checks whether a Guid is a Guid.Empty . [Fact] public void IsEmpty_EmptyGuid_True() { var emptyGuid1 = Guid.Empty; Assert.True(emptyGuid1.IsEmpty()); var emptyGuid2 = new Guid(\"00000000-0000-0000-0000-000000000000\"); Assert.True(emptyGuid2.IsEmpty()); } [Fact] public void IsEmpty_NotEmptyGuid_False() { var notEmptyGuid = new Guid(\"5c246e85-c1af-4654-be86-81da9ab808bf\"); Assert.False(notEmptyGuid.IsEmpty()); } HttpResponseMessage Provides extension methods to HttpResponseMessage . EnsureContentType Throws an exception if the System.Net.Http.HttpResponseMessage.Headers.ContentType property for the HTTP response is different of defaultContentType argument, whose default value is \"application/json; charset=utf-8\" . [Fact] public void EnsureContentType_DefaultContentType_DoesNotThrowsException() { var response1 = new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(string.Empty, Encoding.UTF8, \"application/json\") }; Assert.DoesNotThrows(() => response1.EnsureContentType()); var response2 = new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(string.Empty, Encoding.ASCII, \"text/html\") }; Assert.DoesNotThrows(() => response2.EnsureContentType(\"text/html; charset=us-ascii\")); } [Theory] [InlineData(\"ASCII\", \"application/json\")] [InlineData(\"UTF-8\", \"text/html\")] public void EnsureContentType_NotUtf8ApplicationJson_ThrowsException( string encoding, string mediaType) { var response = new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(string.Empty, Encoding.GetEncoding(encoding), mediaType) }; Assert.Throws<HttpRequestException>(() => response.EnsureContentType()); } DeserializeAsync Deserializes the HttpResponseMessage into a T . public class ViewModelDummy { public int Age { get; set; } public string Name { get; set; } public bool Enabled { get; set; } } [Fact] public async Task DeserializeAsync_Poco_PocoDeserialized() { // Arrange const string json = @\"{ \"\"age\"\": 35, \"\"name\"\": \"\"Peter\"\", \"\"enabled\"\": true }\"; // Act var response = new HttpResponseMessage { Content = new StringContent(json, Encoding.UTF8, \"application/json\") }; var result = await response.DeserializeAsync<ViewModelDummy>(); // Assert Assert.Equal(35, result.Age); Assert.Equal(\"Peter\", result.Name); Assert.True(result.Enabled); } List Provides extension methods to IList<T> . Move Moves an item from a specified old index to a specified new index. [Theory] [InlineData(2, 0, new int[] { 3, 1, 2 })] [InlineData(2, 1, new int[] { 1, 3, 2 })] [InlineData(0, 2, new int[] { 2, 3, 1 })] [InlineData(0, 1, new int[] { 2, 1, 3 })] [InlineData(1, 0, new int[] { 2, 1, 3 })] public void Move_NewOrder_Reordered(int oldIndex, int newIndex, int[] orderExpected) { // Arrange var source = new List<int> { 1, 2, 3 }; // Act source.Move(oldIndex, newIndex); // Assert Assert.Equal(orderExpected[0], source[0]); Assert.Equal(orderExpected[1], source[1]); Assert.Equal(orderExpected[2], source[2]); } String Provides extension methods to string . Replace In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. public class StringExtensionTest { private const string _linkInput = @\"<a href=\\\"\"ViewAllTitlesQuickSearch.aspx?val=2&amp;val1=2171&amp;val65=2171\\\"\">View all titles</a>\"; private const string _linkPattern = @\"(<script(\\s|\\S)*?<\\/script>)|(<style(\\s|\\S)*?<\\/style>)|(<!--(\\s|\\S)*?-->)|(<\\/?(\\s|\\S)*?>)\"; private const string _emailInput = @\"the foo@demo.net e-mail\"; private const string _emailPattern = @\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\"; private const string _hourInput = @\"14:00 is the hour\"; private const string _hourPattern = @\"([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?\"; [Fact] public void Replace_InputCorrectPattern_ReplacementReplaced() { Assert.Equal( \"ReplacedView all titlesReplaced\", _linkInput.Replace(_linkPattern, \"Replaced\", RegexOptions.Compiled)); Assert.Equal( \"the Replaced e-mail\", _emailInput.Replace(_emailPattern, \"Replaced\", RegexOptions.Compiled)); Assert.Equal(\"Replaced is the hour\", _hourInput.Replace(_hourPattern, \"Replaced\", RegexOptions.Compiled)); } [Fact] public void Replace_InputIncorrectPattern_ReplacementNotReplaced() { Assert.Equal( @\"<a href=\\\"\"ViewAllTitlesQuickSearch.aspx?val=2&amp;val1=2171&amp;val65=2171\\\"\">View all titles</a>\", _linkInput.Replace(_hourPattern, \"Replaced\", RegexOptions.Compiled)); Assert.Equal( \"the foo@demo.net e-mail\", _emailInput.Replace(@\"\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*\", \"Replaced\", RegexOptions.Compiled)); Assert.Equal( \"14:00 is the hour\", _hourInput.Replace(@\"\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*\", \"Replaced\", RegexOptions.Compiled)); } } Remove In a specified input string, removes all strings that match a specified regular expression with a specified replacement string. public class StringExtensionTest { private const string _linkInput = @\"<a href=\\\"\"ViewAllTitlesQuickSearch.aspx?val=2&amp;val1=2171&amp;val65=2171\\\"\">View all titles</a>\"; private const string _linkPattern = @\"(<script(\\s|\\S)*?<\\/script>)|(<style(\\s|\\S)*?<\\/style>)|(<!--(\\s|\\S)*?-->)|(<\\/?(\\s|\\S)*?>)\"; private const string _emailInput = @\"the foo@demo.net e-mail\"; private const string _emailPattern = @\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\"; private const string _hourInput = @\"14:00 is the hour\"; private const string _hourPattern = @\"([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?\"; [Fact] public void Remove_InputCorrectPattern_Removed() { Assert.Equal(\"View all titles\", _linkInput.Remove(_linkPattern)); Assert.Equal(\"the e-mail\", _emailInput.Remove(_emailPattern)); Assert.Equal(\" is the hour\", _hourInput.Remove(_hourPattern)); } [Fact] public void Remove_InputIncorrectPattern_NotRemoved() { Assert.Equal( @\"<a href=\\\"\"ViewAllTitlesQuickSearch.aspx?val=2&amp;val1=2171&amp;val65=2171\\\"\">View all titles</a>\", _linkInput.Remove(_hourPattern)); Assert.Equal(\"the foo@demo.net e-mail\", _emailInput.Remove(@\"\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*\")); Assert.Equal(\"14:00 is the hour\", _hourInput.Remove(@\"\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*\")); } } Format Replaces the format items in a string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information. [Fact] public void Format_Input_Formated() { string input = \"Replace {0} {1} in this {2}\".Format(\"some\", \"words\", \"phrase\"); Assert.Equal(\"Replace some words in this phrase\", input); } PascalCaseToSnakeCase Converts a specified PascalCase string to its Snake_Case representation (that is. underscore separation). [Theory] [InlineData( \"EscolheUmTrabalhoDeQueGostes,ENãoTerásQueTrabalharNemUmDiaNaTuaVida.\", \"Escolhe_Um_Trabalho_De_Que_Gostes,_E_Não_Terás_Que_Trabalhar_Nem_Um_Dia_Na_Tua_Vida.\")] // - Confúcio [InlineData( \"EuNãoFalhei.SóDescobri10MilCaminhosQueNãoEramOCerto\", \"Eu_Não_Falhei._Só_Descobri10_Mil_Caminhos_Que_Não_Eram_O_Certo\")] // - Thomas Edison [InlineData( \"OSucessoNormalmenteVemParaQuemEstáOcupadoDemaisParaProcurarPorEle\", \"O_Sucesso_Normalmente_Vem_Para_Quem_Está_Ocupado_Demais_Para_Procurar_Por_Ele\")] // – Henry David Thoreau public void PascalCaseToSnakeCase_InputPascalCase_OutputSnakeCase( string input, string expectedSnakeCase) { Assert.Equal(expectedSnakeCase, input.PascalCaseToSnakeCase()); } EncodeToBase64String Converts an string to its equivalent encoded with base-64. [Fact] public void EncodeToBase64String_Input_Base64StringEncoded() { string plainString = \"A clean, simple and extensible, carefully crafted set of libraries for general purpose.\"; string base64String = plainString.EncodeToBase64String(); Assert.Equal(\"QSBjbGVhbiwgc2ltcGxlIGFuZCBleHRlbnNpYmxlLCBjYXJlZnVsbHkgY3JhZnRlZCBzZXQgb2YgbGlicmFyaWVzIGZvciBnZW5lcmFsIHB1cnBvc2Uu\", base64String); } DecodeFromBase64String Converts a base-64 string to its equivalent decoded string. [Fact] public void DecodeFromBase64String_Input_Base64StringDecoded() { string base64String = \"QSBjbGVhbiwgc2ltcGxlIGFuZCBleHRlbnNpYmxlLCBjYXJlZnVsbHkgY3JhZnRlZCBzZXQgb2YgbGlicmFyaWVzIGZvciBnZW5lcmFsIHB1cnBvc2Uu\"; string plainString = base64String.DecodeFromBase64String(); Assert.Equal(\"A clean, simple and extensible, carefully crafted set of libraries for general purpose.\", plainString); } ToSlug Converts a phrase to its slug representation. [Theory] [InlineData( \"Escolhe um trabalho de que gostes, e não terás que trabalhar nem um dia na tua vida.\", \"escolhe-um-trabalho-de-que-gostes-e-nao-teras-que-trabalhar-nem-um-dia-na-tua-vida\")] // - Confúcio [InlineData( \"A vida vai ficando cada vez mais dura perto do topo\", \"a-vida-vai-ficando-cada-vez-mais-dura-perto-do-topo\")] // - Nietzsche [InlineData( \"O sucesso normalmente vem para quem está ocupado demais para procurar por ele\", \"o-sucesso-normalmente-vem-para-quem-esta-ocupado-demais-para-procurar-por-ele\")] // – Henry David Thoreau public void ToSlug_InputMaxLength300_Slug(string input, string expectedSlug) { Assert.Equal(expectedSlug, input.ToSlug(maxLength: 300)); } [Theory] [InlineData( \"Escolhe um trabalho de que gostes, e não terás que trabalhar nem um dia na tua vida.\", \"escolhe-um-trabalho-de-que-gostes-e-nao-teras-que-trabalhar\")] // - Confúcio [InlineData( \"Eu não falhei. Só descobri 10 mil caminhos que não eram o certo\", \"eu-nao-falhei-so-descobri-10-mil-caminhos-que-nao-eram-o-cer\")] // - Thomas Edison [InlineData( \"O sucesso normalmente vem para quem está ocupado demais para procurar por ele\", \"o-sucesso-normalmente-vem-para-quem-esta-ocupado-demais-para\")] // – Henry David Thoreau public void ToSlug_InputLengthDefault60_Slug(string input, string expectedSlug) { Assert.Equal(expectedSlug, input.ToSlug()); }"
  },
  "articles/guards.html": {
    "href": "articles/guards.html",
    "title": "Guard Clauses | Krafted",
    "keywords": "Guard Clauses What is / what is it for? Provides a fluent API to apply guard clauses to validate method arguments, in order to enforce defensive programming practice. Where should I use it? In the public interface of classes (i.e. public methods , including the constructor) and when get information from external files (e.g. appsettings.json ). Samples Below are some examples of the guard clauses to protect the public APIs of some classes. P.S.: For simplicity, the examples only contain code snippets of the classes. You can see the full code by clicking on 'See full code'. public static class ListExtension { public static void Move<T>(this IList<T> list, int oldIndex, int newIndex) { Guard.Against .Empty(list, nameof(list)) .Negative(oldIndex, nameof(oldIndex)) .Negative(newIndex, nameof(newIndex)); var item = list[oldIndex]; list.RemoveAt(oldIndex); list.Insert(newIndex, item); } ... } See full code: ListExtension.cs public class Question : EntityBase, ISortable { private readonly List<Answer> _answers = new List<Answer>(); public Question(string name, IList<Answer> answers) { Guard.Against .Length(5, 500, name, nameof(name)) .NullOrWhiteSpace(name, nameof(name)) .Empty(answers, nameof(answers)) .False(_ => answers.Any(a => a.IsCorrect), \"At least one answer must be correct.\"); Name = name; _answers = answers.ToList(); } ... } See full code: Question.cs In the example below the guard clauses are being reused between the constructor and the EditBasicInfo method, each of which contains specific validations in addition to those present in the Validate method: public class Product : EntityBase, IAggregateRoot { public Product( ProductType productType, Name name, string shortDescription, Category category, Money price, ProductCardCover cardCover) { Validate(name, shortDescription, category, price) .Null(cardCover, nameof(cardCover)) .NotExists<ProductType>(productType); ProductType = productType; Name = (Name)name.Value.ToLower(CultureInfo.InvariantCulture); ShortDescription = shortDescription; Category = category; Price = price; CardCover = cardCover; Status = ProductStatus.Draft; WarrantyType = WarrantyType.Warranty7Days; CreatingDate = DateTime.Now; } public void SetRating(int rating) { Guard.Against .ZeroOrLess(rating, nameof(rating)) .GreaterThan(5, rating, nameof(rating)); Rating = rating; } public void EditBasicInfo( Name name, string shortDescription, Category category, Money price, ProductCardCover cardCover, ProductStatus status, WarrantyType warranty, bool expires, int? expireInDays) { Validate(name, shortDescription, category, price) .NotExists<ProductStatus>(status) .Null(cardCover, nameof(cardCover)) .NotExists<WarrantyType>(warranty); Name = name; ShortDescription = shortDescription; Category = category; Price = price; CardCover = cardCover; Status = status; WarrantyType = warranty; Expires = expires; ExpireInDays = expireInDays; } private static Guard Validate( Name name, string shortDescription, Category category, Money price) { return Guard.Against .Null(name, nameof(name)) .NullOrWhiteSpace(shortDescription, nameof(shortDescription)) .Length(5, 200, shortDescription, nameof(shortDescription)) .Null(category, nameof(category)) .Null(price, nameof(price)); } ... } See full code: Product.cs In the example below, since we are getting values from appsettings.json , we are also validating them. Because like the arguments of a public method, appsettings.json settings are data that we receive through external input, so we need to ensure that the data is valid, so we can use it with reliability. public class EmailService : IEmailService { private readonly string _host; private readonly int _port; private readonly SecureSocketOptions _secureSocketOptions; private readonly string _fromName; private readonly string _fromEmail; private readonly string _userName; private readonly string _password; public EmailService(IConfiguration config) { Guard.Against.Null(config, nameof(config)); _host = config[\"SendGrid:Host\"]; _port = int.Parse(config[\"SendGrid:Port\"]); _secureSocketOptions = (SecureSocketOptions)int.Parse(config[\"SendGrid:SecureSocketOptions\"]); _fromName = config[\"SendGrid:FromName\"]; _fromEmail = config[\"SendGrid:FromEmail\"]; _userName = config[\"SendGrid:UserName\"]; _password = config[\"SendGrid:Password\"]; Guard.Against .NullOrWhiteSpace(_host, nameof(_host)) .ZeroOrLess(_port, nameof(_port)) .NotExists<SecureSocketOptions>(_secureSocketOptions) .NullOrWhiteSpace(_fromName, nameof(_fromName)) .InvalidEmail(_fromEmail) .NullOrWhiteSpace(_userName, nameof(_userName)) .NullOrWhiteSpace(_password, nameof(_password)); } public async Task SendEmailAsync(MailAddress to, string subject, string htmlMessage) { Guard.Against .Null(to, nameof(to)) .NullOrWhiteSpace(subject, nameof(subject)) .NullOrWhiteSpace(htmlMessage, nameof(htmlMessage)); ... } ... } public sealed class Email : ValueObject<string> { public Email(string value) { Guard.Against.InvalidEmail(value); Value = value; } ... } See full code: Email.cs public sealed class Money : ValueObject<decimal> { public Money(decimal value) { Guard.Against.Negative(value, nameof(value)); Value = value; } ... } See full code: Money.cs Finally, you can create your own guard clauses by extending the Guard class: namespace Krafted.Guards { public static class GuardExtension { public static Guard Errors(this Guard guard, IReadOnlyList<Error> errors) { Guard.Against .Null(guard, nameof(guard)) .Null(errors, nameof(errors)); if (errors.Any()) { throw new InvalidOperationException(errors.ToMessage()); } return guard; } public static Guard Errors(this Guard guard, ErrorContext context) { Guard.Against .Null(guard, nameof(guard)) .Null(context, nameof(context)); if (context.HasErrors) { throw new InvalidOperationException(context.Errors.ToMessage()); } return guard; } } } See full code: GuardExtension.cs And even combine with notification pattern and CanExecute pattern to use in your commands: public class Quiz { ... private readonly List<Question> _questions = new List<Question>(); public IReadOnlyList<Question> Questions => _questions.ToList(); public ErrorContext CanAddQuestion(Question question) { return ErrorContext.Default .AddIf(_ => question.Answers.Count > 6, new Error(\"Enter max of 6 answers.\")) .AddIf(_ => !question.Answers.Any(a => a.IsCorrect), new Error(\"Enter almost one correct answer.\")); } public void AddQuestion(Question question) { Guard.Against.Null(question, nameof(question)); Questions.Load(); var context = CanAddQuestion(question); Guard.Against.Errors(context); _questions.Add(question); } ... } See full code: Quiz.cs public sealed class RegisterQuestionHandler : IRequestHandler<RegisterQuestionCommand, ICommandResult<RegisterQuestionViewModel>> { ... public async Task<ICommandResult<RegisterQuestionViewModel>> Handle( RegisterQuestionCommand request, CancellationToken cancellationToken) { ... var question = new Question(request.Name, request.Answers); var context = quiz.CanAddQuestion(question); if (context.HasErrors) { return _commandResult.Errors(context.Errors); } quiz.AddQuestion(question); await _quizRepository.Save(quiz); await _quizRepository.UnitOfWork.CommitAsync(); return _commandResult.Content(_mapper.Map<RegisterQuestionViewModel>(quiz)); } } All available guard clauses : Empty False False with predicate True True with predicate Length exactLength Length between minLength and maxLength LessThan GreaterThan Match NotMatch MaxLength MinLength NotEmpty NotExists Null NullOrEmpty NullOrWhiteSpace NullOrWhiteSpace with message Positive Zero ZeroOrLess Negative InvalidEmail InvalidNif"
  },
  "articles/unit-tests.html": {
    "href": "articles/unit-tests.html",
    "title": "Unit Tests | Krafted",
    "keywords": "Unit Tests What is / what is it for? Extension methods, DataAnnotations and Test Doubles to enhance the unit tests. Where should I use it? In your unit tests. Samples Below are some examples. Xunit DoesNotThrows Verifies that no exception was thrown. [Fact] public void GuardAgainstEmpty_NotEmpty_DoesNotThrows() { Assert.DoesNotThrows(() => { var myCollection1 = new List<int> { 1 }; Guard.Against.Empty(myCollection1, nameof(myCollection1)); var myCollection2 = new List<string> { \"A\" }; Guard.Against.Empty(myCollection1, nameof(myCollection2)); }); } UseCultureAttribute A attribute to replace the CurrentCulture with another culture. This class was obtained from the Xunit samples. Source: https://raw.githubusercontent.com/xunit/samples.xunit/main/UseCulture/UseCultureAttribute.cs Retrieved in November 2020. [Theory] [InlineData(\"it-IT\")] [InlineData(\"ja-JP\")] [InlineData(\"nb-NO\")] public void CultureIsChangedWithinTest(string culture) { var originalCulture = Thread.CurrentThread.CurrentCulture; var attr = new UseCultureAttribute(culture); attr.Before(null); Assert.Equal(attr.Culture, Thread.CurrentThread.CurrentCulture); attr.After(null); Assert.Equal(originalCulture, Thread.CurrentThread.CurrentCulture); } Test Double HttpClientMockFactory Provides a Factory Method to create a mock for HttpClient . [Fact] public async Task Get_ResponseAndHttpStatus200OK_ResponseAndHttpStatus200OKGet() { // Arrange const string response = @\" { \"\"age\"\": 35, \"\"name\"\": \"\"Maicon Heck\"\", \"\"enabled\"\": true }\"; var httpClient = HttpClientMockFactory.New(response, HttpStatusCode.OK); // Act var getResponse = await httpClient.GetAsync(\"/api/nothing\"); var getResponseDeserialized = await getResponse.DeserializeAsync<ViewModelDummy>(); // Assert Assert.Equal(HttpStatusCode.OK, getResponse.StatusCode); Assert.Equal(35, getResponseDeserialized.Age); Assert.Equal(\"Maicon Heck\", getResponseDeserialized.Name); Assert.True(getResponseDeserialized.Enabled); }"
  },
  "articles/value-objects.html": {
    "href": "articles/value-objects.html",
    "title": "Value Objects | Krafted",
    "keywords": "Value Objects What is / what is it for? A set of common Value Objects , with comparison and shallow copy operations. Value types that measure, quantify, or describe things are easier to create, test, use, optimize, and maintain. It measures, quantifies, or describes a thing in the domain. It can be maintained as immutable. It models a conceptual whole by composing related attributes as an integral unit. It is completely replaceable when the measurement or description changes. It can be compared with others using Value equality. It supplies its collaborators with Side-Effect-Free Behavior [Evans]. Vernon, Vaughn. Implementing Domain-Driven Design. (2013) Where should I use it? Value Objects are a DDD (Domain-Driven Design) building block used in the domain modeling. It is great to avoid primitive obsession code smell and enrich the domain model . In this library, each Value Object already contains: The validation for its value. So when you use, for example, Nif or Email , you don't have to worrying about creating a validation for them, thus avoiding separating the logic from the data (e.g. ValidationHelper ), which would lead to creating anemic classes. Equals method and == and != operators. GetCopy method to creates a shallow copy of the Value Object. ToString method to returns the string representation of the Value Object. explicit operator to performs an explicit conversion from the literal value to the Value Object, for example: Email email = (Email)\"foo@bar.com\"; A Factory Method to create a new instance of the Value Object in a convenient way, for example: Email email = Email.NewEmail(\"foo@bar.com\"); These are the common members for all Value Objects. Some Value Objects contain other members depending on their type, for example, Money has increment and decrement operators, and the IntegralPart property: var money = Money.NewMoney(10.25); money += 5; money -= 2; money.Value; // 13.25 money.IntegralPart; // 13 Samples Below are some examples of each Value Object contained in this package. Nif Represents an NIF value object. NIF means \"Número de Identificação Fiscal\", a.k.a \"Número de Contribuinte\", identifies a taxpayer entity in Portugal, whether it is a company or an individual. Email Represents an email value object. public sealed class BillingData { public BillingData(string name, Email email, Nif nif) { Guard.Against .NullOrWhiteSpace(name, nameof(name)) .Null(email, nameof(email)) .Null(nif, nameof(nif)); Name = name; Email = email; Nif = nif; } public string Name { get; } public Email Email { get; } public Nif Nif { get; } } Money Represents an money value object. public class OrderItem : Entity { ... public Money TotalPrice => Money.NewMoney(Product.Price * Quantity); public Money Total => TotalPrice + KindOfPackage.Price; ... } public sealed class Order : Entity, IAggregateRoot { ... public Money Subtotal => (Money)_orderItems.Sum(i => i.Total); public Money Total => Subtotal + DeliveryFee; ... } Url Represents an URL (Uniform Resource Locator) value object. public class LessonVideo : Lesson { ... public Url Link { get; private set; }; public TimeSpan Duration { get; private set; } public VideoType VideoType { get; private set; } ... } You can create your own Value Objects by inheriting from the ValueObject<T> class: public class Name : ValueObject<string> { public Name(string value) { Guard.Against .NullOrWhiteSpace(value, nameof(value)) .Length(1, 60, value, nameof(value)); Value = value; } // Required for ORM mapping private Name() { } public static explicit operator Name(string value) => new Name(value); public static Name NewName(string value) => new Name(value); } public sealed class Slug : ValueObject<string> { public Slug(string value) { Guard.Against.NullOrWhiteSpace(value, nameof(value)); Value = value.ToSlug(); } // Required for ORM mapping private Slug() { } public static explicit operator Slug(string value) => new Slug(value); public static Slug NewSlug(string value) => new Slug(value); } And for yours Value Objects with multiple property, you can create your own Value Objects by inheriting from the ValueObject class, and implements GetEqualityComponents : public class Address : ValueObject { public Address(string street, string city, string zipCode) { Street = street; City = city; ZipCode = zipCode; } public string Street { get; } public string City { get; } public string ZipCode { get; } protected override IEnumerable<object> GetEqualityComponents() { yield return Street; yield return City; yield return ZipCode; } } Entity Framework mapping samples Mapping Value Objects with single value ( Money ) and with multiple values ( Address , Payment ): public sealed class OrderMap : IEntityTypeConfiguration<Order> { ... public void Configure(EntityTypeBuilder<Order> builder) { builder.Property(p => p.Subtotal) .HasConversion(p => p.Value, p => new Money(p)) .IsRequired(); builder.Property(p => p.Total) .HasConversion(p => p.Value, p => new Money(p)) .IsRequired(); builder.OwnsOne(o => o.Address, a => { a.WithOwner(); a.Property(p => p.Street) .HasColumnName(\"Address_Street\") .IsRequired(false); a.Property(p => p.City) .HasColumnName(\"Address_City\") .IsRequired(false); a.Property(p => p.ZipCode) .HasColumnName(\"Address_ZipCode\") .IsRequired(false); }); builder.OwnsOne(o => o.Payment, a => { a.WithOwner(); a.Property(p => p.AccessType) .HasColumnName(\"Payment_AccessType\") .IsRequired(false); a.Property(p => p.PaymentMethod) .HasColumnName(\"Payment_PaymentMethod\") .IsRequired(false); a.Property(p => p.Price) .HasConversion(p => p.Value, p => new Money(p)) .HasColumnName(\"Payment_Price\") .IsRequired(false); }); } } If you have lazy loading activated, use ActivatorHelper.CreateInstance<TValueObject> to map single property Value Objects: public class CourseMap : IEntityTypeConfiguration<Course> { public void Configure(EntityTypeBuilder<Course> builder) { ... builder.Property(p => p.Name) .HasConversion(p => p.Value, p => ActivatorHelper.CreateInstance<Name>(p)) .HasMaxLength(60) .IsRequired(); } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "What is Krafted? | Krafted",
    "keywords": "What is Krafted? A clean, decoupled and extensible, carefully crafted set of libraries for general purpose. Krafted provides a toolkit of useful and reusable pieces of code, in order to increase your productivity. 🚀 It’s reliable, 100% documented and highly test code coverage. ✅ Why another library? There is a problem in toolkit development, especially for general purpose: As toolkits get new features, naturally, they get more dependencies on other 3rd packages, and when we install these toolkits, we end up relying on a number of nuget packages that we don't need, which causes unnecessary coupling, and in the worst case dependency conflict. Well, this problem doesn't just happen with toolkits. Remember System.Web.dll ? This assembly, over time, became a large monolith that contained several ASP.net (full framework) modules. In fact, one of the problems that were solved by the .NET team through the new .NET Core / ASP.net Core, was precisely the granularization of the modules, thus solving problems such as the old System.Web.dll monolith. When looking at the architecture and fine-grained distribution strategy of the .NET Core and ASP.net Core packages, I came up with the idea of creating a toolkit with this fine-grained strategy, providing high decoupling, independent evolution, and long life to the modules. Another way to solve this problem would not be to create several toolkits, each one with a specific purpose? In fact, and if you look at every Krafted package, you'll see that it's just that. Each package is independent and has a very specific purpose. However, I wanted to keep all packages under the same umbrella of the Krafted project, because in addition to being high-decoupled, Krafted has other quality criteria, and all its packages are consistent with them: 100% documented (docs, API e IntelliSense). Highly test code coverage. Almost all packages have zero nuget dependencies. Code quality analyzed by .NET Analyzers , StyleCop Analyzers and SonarCloud . Getting started Check out the docs to get some samples of how Krafted can help you. To get more details, check out the API reference . Features / where can I get? As explained above, Krafted consists in a set of fine-grained modules, each one is delivered as a nuget package. So get the packages according to the features you want: Krafted.Guards A set of Guard Clauses to validate method arguments, in order to enforce defensive programming practice. Krafted.Extensions A set of extension methods for String, Collections, Guid and other types. Krafted.ValueObjects A set of common Value Objects, with comparison and shallow copy operations. Krafted.DataAnnotations A set of DataAnnotations attributes for validations. Krafted.UnitTests Extension methods, DataAnnotations and Test Doubles to enhance the unit tests. Krafted.DesignPatterns A set of building blocks and participants to implement Design Patterns of GoF and others. How can I get help? If you have a question, I suggest Stack Overflow as the fastest way to get help. For bugs, issues or feature requests, please, create a GitHub Issue . How can I contribute? Annoyed for copying and pasting your utility code between your projects? 😩 How about being able to reuse your code through the Krafted? 😎 Krafted was created to be a home of useful and reusable pieces of code for the .NET community. So if you have any code snippet that is useful, clean, decoupled and tested, and want to contribute to this goal, please make a pull request! 💜"
  }
}